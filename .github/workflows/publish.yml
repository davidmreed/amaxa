name: Build Releases

on:
  release:
    types: [published]

jobs:
  build_package:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Update Pip
        shell: bash
        run: |
          python -m pip install --upgrade pip
      - name: Locate Pip Cache
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install
        shell: bash
        run: |
          pip install poetry
          poetry install --no-root
      - name: Build Package
        run: poetry build
      - name: Upload Release Asset - Wheel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ format('dist/amaxa-{0}-py3-none-any.whl', github.event.release.tag_name) }}
          asset_name: Wheel
          asset_content_type: application/zip
      - name: Upload Release Asset - sdist
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ format('dist/amaxa-{0}.tar.gz', github.event.release.tag_name) }}
          asset_name: Sdist
          asset_content_type: application/gzip
      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish

  build_binary:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Update Pip
        shell: bash
        run: |
          python -m pip install --upgrade pip
      - name: Locate Pip Cache
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install
        shell: bash
        run: |
          pip install poetry
          poetry install --no-root
      - name: Build Binary
        shell: bash
        run: poetry run pyinstaller amaxa/__main__.py -n amaxa -F
      - name: Test Binary
        if: "!startsWith(matrix.os, 'windows')"
        shell: bash
        run: ./dist/amaxa -h
      - name: Test Binary (Windows)
        if: "startsWith(matrix.os, 'windows')"
        shell: bash
        run: ./dist/amaxa.exe -h
      - name: Upload Release Asset
        if: "!startsWith(matrix.os, 'windows')"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/amaxa
          asset_name: ${{ format('amaxa_{0}', matrix.os) }}
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (Windows)
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/amaxa.exe
          asset_name: 'amaxa_windows.exe'
          asset_content_type: application/octet-stream
